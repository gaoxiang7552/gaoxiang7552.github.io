<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Java内存模型]]></title>
      <url>/2017/12/14/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h1 id="Java内存模型"><a href="#Java内存模型" class="headerlink" title="Java内存模型"></a>Java内存模型</h1><ul>
<li>一般地大家讲到的Java内存其实就是Jvm内存</li>
<li>Java代码是运行在Java虚拟机之上的，由Java虚拟机通过解释执行(解释器)或编译执行(即时编译器)来完成，故Java内存模型，也就是指Java虚拟机的运行时内存模型。</li>
</ul>
<hr>
<h2 id="1-内存模型图"><a href="#1-内存模型图" class="headerlink" title="1. 内存模型图"></a><a href="#1-内存模型图" title="1. 内存模型图"></a>1. <strong>内存模型图</strong></h2><p><a href="http://www.cssxt.com/uploadfile/2017/0723/20170723100414755.jpg" title="gc内存模型" target="_blank" rel="noopener"><img src="http://www.cssxt.com/uploadfile/2017/0723/20170723100414755.jpg" alt="gc内存模型"></a></p>
<h2 id="2-详细介绍"><a href="#2-详细介绍" class="headerlink" title="2. 详细介绍"></a><a href="#2-详细介绍" title="2. 详细介绍"></a>2. <strong>详细介绍</strong></h2><h3 id="1-程序计数器PC"><a href="#1-程序计数器PC" class="headerlink" title="1. 程序计数器PC"></a><a href="#1-程序计数器PC" title="1. 程序计数器PC"></a>1. 程序计数器PC</h3><ul>
<li>程序计数器PC，当前线程所执行的字节码行号指示器。每个线程都有自己计数器，是私有内存空间，该区域是整个内存中较小的一块。</li>
<li>当线程正在执行一个Java方法时，PC计数器记录的是正在执行的虚拟机字节码的地址；当线程正在执行的一个Native方法时，PC计数器则为空（Undefined）。<h3 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2. 虚拟机栈"></a><a href="#2-虚拟机栈" title="2. 虚拟机栈"></a>2. 虚拟机栈</h3></li>
</ul>
<p>虚拟机栈，生命周期与线程相同，是Java方法执行的内存模型。每个方法(不包含native方法)执行的同时都会创建一个栈帧结构，方法执行过程，对应着虚拟机栈的入栈到出栈的过程。</p>
<p><strong>栈帧(Stack Frame)结构</strong><br>栈帧是用于支持虚拟机进行方法执行的数据结构，是属性运行时数据区的虚拟机站的栈元素。见上图， 栈帧包括：</p>
<ul>
<li>局部变量表 (locals大小，编译期确定)，一组变量存储空间， 容量以slot为最小单位。</li>
<li>操作栈(stack大小，编译期确定)，操作栈元素的数据类型必须与字节码指令序列严格匹配</li>
<li>动态连接， 指向运行时常量池中该栈帧所属方法的引用，为了 动态连接使用。<br>前面的解析过程其实是静态解析；<br>对于运行期转化为直接引用，称为动态解析。</li>
<li>方法返回地址<br>正常退出，执行引擎遇到方法返回的字节码，将返回值传递给调用者<br>异常退出，遇到Exception,并且方法未捕捉异常，那么不会有任何返回值。</li>
<li>额外附加信息，虚拟机规范没有明确规定，由具体虚拟机实现。<br><strong>异常(Exception)</strong><br>Java虚拟机规范规定该区域有两种异常：</li>
<li>StackOverFlowError：当线程请求栈深度超出虚拟机栈所允许的深度时抛出</li>
<li><p>OutOfMemoryError：当Java虚拟机动态扩展到无法申请足够内存时抛出</p>
<h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a><a href="#3-本地方法栈" title="3. 本地方法栈"></a>3. 本地方法栈</h3></li>
</ul>
<p>本地方法栈则为虚拟机使用到的Native方法提供内存空间，而前面讲的虚拟机栈式为Java方法提供内存空间。有些虚拟机的实现直接把本地方法栈和虚拟机栈合二为一，比如非常典型的Sun HotSpot虚拟机。<br><strong>异常(Exception)</strong><br>Java虚拟机规范规定该区域可抛出StackOverFlowError和OutOfMemoryError。</p>
<h3 id="4-方法区"><a href="#4-方法区" class="headerlink" title="4. 方法区"></a><a href="#4-方法区" title="4. 方法区"></a>4. 方法区</h3><p>方法区主要存放的是已被虚拟机加载的类信息、常量、静态变量、编译器编译后的代码等数据。GC在该区域出现的比较少。<br><strong>异常(Exception)</strong><br>Java虚拟机规范规定该区域可抛出OutOfMemoryError。<br><strong>运行时常量池</strong><br>运行时常量池也是方法区的一部分，用于存放编译器生成的各种字面量和符号引用。运行时常量池除了编译期产生的Class文件的常量池，还可以在运行期间，将新的常量加入常量池，比较常见的是String类的intern()方法。</p>
<ul>
<li>字面量：与Java语言层面的常量概念相近，包含文本字符串、声明为final的常量值等。</li>
<li>符号引用：编译语言层面的概念，包括以下3类：</li>
</ul>
<ol>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li><p>方法的名称和描述符<br>但是该区域不会抛出OutOfMemoryError异常。</p>
<h3 id="5-Java堆"><a href="#5-Java堆" class="headerlink" title="5. Java堆"></a><a href="#5-Java堆" title="5. Java堆"></a>5. Java堆</h3></li>
</ol>
<p>Java堆，是Java虚拟机管理的最大的一块内存，也是GC的主战场，里面存放的是几乎所有的对象实例和数组数据。JIT编译器有栈上分配、标量替换等优化技术的实现导致部分对象实例数据不存在Java堆，而是栈内存。</p>
<ul>
<li>从内存回收角度，Java堆被分为新生代和老年代；这样划分的好处是为了更快的回收内存；</li>
<li>从内存分配角度，Java堆可以划分出线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB)；这样划分的好处是为了更快的分配内存；<br>对象创建的过程是在堆上分配着实例对象，那么对象实例的具体结构如下：<br><a href="http://wangnan.tech/post/java-memory/02.png" title="对象实例结构" target="_blank" rel="noopener"><img src="http://wangnan.tech/post/java-memory/02.png" alt="对象实例结构"></a><br>对于填充数据不是一定存在的，仅仅是为了字节对齐。HotSpot VM的自动内存管理要求对象起始地址必须是8字节的整数倍。对象头本身是8的倍数，当对象的实例数据不是8的倍数，便需要填充数据来保证8字节的对齐。该功能类似于高速缓存行的对齐。</li>
</ul>
<p>另外，关于在堆上内存分配是并发进行的，虚拟机采用CAS加失败重试保证原子操作，或者是采用每个线程预先分配TLAB内存.</p>
<p><strong>异常(Exception)</strong><br>Java虚拟机规范规定该区域可抛出OutOfMemoryError。</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[java多线程同步方法]]></title>
      <url>/2016/06/01/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="java多线程同步方法"><a href="#java多线程同步方法" class="headerlink" title="java多线程同步方法"></a>java多线程同步方法</h1><h2 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a><a href="#同步方法" title="同步方法"></a>同步方法</h2><p>即有synchronized关键字修饰的方法。 由于java的每个对象都有一个内置锁，当用此关键字修饰方法时，内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。<br>synchronized关键字也可以修饰静态方法，此时如果调用该静态方法，将会锁住整个方法</p>
<h2 id="同步代码块"><a href="#同步代码块" class="headerlink" title="同步代码块"></a><a href="#同步代码块" title="同步代码块"></a>同步代码块</h2><p>即有synchronized关键字修饰的语句块。被该关键字修饰的语句块会自动被加上内置锁，从而实现同步<br>注：同步是一种高开销的操作，因此应该尽量减少同步的内容。通常没有必要同步整个方法，使用synchronized代码块同步关键代码即可。</p>
<h2 id="使用特殊域变量-Volatile-实现线程同步"><a href="#使用特殊域变量-Volatile-实现线程同步" class="headerlink" title="使用特殊域变量(Volatile)实现线程同步"></a><a href="#使用特殊域变量-Volatile-实现线程同步" title="使用特殊域变量(Volatile)实现线程同步"></a>使用特殊域变量(Volatile)实现线程同步</h2><ul>
<li>volatile关键字为域变量的访问提供了一种免锁机制</li>
<li>使用volatile修饰域相当于告诉虚拟机该域可能会被其他线程更新</li>
<li>因此每次使用该域就要重新计算，而不是使用寄存器中的值</li>
<li>volatile不会提供任何原子操作，它也不能用来修饰final类型的变量</li>
</ul>
<p>就是因为volatile不能保证原子操作导致的，因此volatile不能代替synchronized。此外volatile会组织编译器对代码优化，因此能不使用它就不适用它吧。它的原理是每次要线程要访问volatile修饰的变量时都是从内存中读取，而不是存缓存当中读取，因此每个线程访问到的变量值都是一样的。这样就保证了同步。</p>
<h2 id="使用重入锁实现线程同步"><a href="#使用重入锁实现线程同步" class="headerlink" title="使用重入锁实现线程同步"></a><a href="#使用重入锁实现线程同步" title="使用重入锁实现线程同步"></a>使用重入锁实现线程同步</h2><p>在JavaSE5.0中新增了一个java.util.concurrent包来支持同步。ReentrantLock类是可重入、互斥、实现了Lock接口的锁， 它与使用synchronized方法和快具有相同的基本行为和语义，并且扩展了其能力。<br>ReenreantLock类的常用方法有：</p>
<ul>
<li>ReentrantLock() : 创建一个ReentrantLock实例</li>
<li>lock() : 获得锁</li>
<li><p>unlock() : 释放锁<br>如果synchronized关键字能满足用户的需求，就用synchronized，因为它能简化代码 。如果需要更高级的功能，就用ReentrantLock类，此时要注意及时释放锁，否则会出现死锁，通常在finally代码释放锁</p>
<h2 id="使用局部变量实现线程同步"><a href="#使用局部变量实现线程同步" class="headerlink" title="使用局部变量实现线程同步"></a><a href="#使用局部变量实现线程同步" title="使用局部变量实现线程同步"></a>使用局部变量实现线程同步</h2><p>如果使用ThreadLocal管理变量，则每一个使用该变量的线程都获得该变量的副本，副本之间相互独立，这样每一个线程都可以随意修改自己的变量副本，而不会对其他线程产生影响。现在明白了吧，原来每个线程运行的都是一个副本，也就是说存钱和取钱是两个账户，知识名字相同而已。所以就会发生上面的效果。<br><strong>ThreadLocal与同步机制</strong></p>
</li>
</ul>
<ol>
<li>ThreadLocal与同步机制都是为了解决多线程中相同变量的访问冲突问题</li>
<li>前者采用以”空间换时间”的方法，后者采用以”时间换空间”的方式<br>参考：<br><a href="http://www.codeceo.com/article/java-multi-thread-sync.html" target="_blank" rel="noopener">Java 多线程同步的五种方法</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> java基础 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> java </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/404.html</url>
      <content type="html"><![CDATA[<p>layout: 404<br>title: “[404]”<br>description: “May the Force be with you :&#41;”</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于我]]></title>
      <url>/about/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
